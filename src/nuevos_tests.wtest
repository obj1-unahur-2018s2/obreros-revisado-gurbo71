import obrero.*
import obra.*

describe "Obreros" {

	const obra = new Obra()
	const albanil1 = new Albanil()
	const albanil2 = new Albanil()
	const gasista1 = new Gasista()
	const gasista2 = new Gasista()
	const plomero = new Plomero()
	const electricista = new Electricista()

	fixture {
		obra.ladrillos(1000)
		obra.metrosDeCanio(400)
		obra.fosforos(8000)
		obra.arandelas(500)
		obra.metrosDeCable(2000)
		obra.cinta(200)
		obra.efectivoObra(100000)
				
		obra.agregarObrero(albanil1)
		obra.agregarObrero(albanil2)
		obra.agregarObrero(gasista1)
		obra.agregarObrero(gasista2)
		obra.agregarObrero(plomero)
		obra.agregarObrero(electricista)
		
		albanil1.estaDeLicencia(true)
		obra.registrarJornada()
	}

	test "registran su consumo en la obra" {
		//obra.registrarJornada()
		assert.equals(900, obra.ladrillos())
		assert.equals(384, obra.metrosDeCanio())
		assert.equals(7960, obra.fosforos())
		assert.equals(470, obra.arandelas())
	}
	
	test "la obra falla si no tiene obreros disponibles" {
		[albanil2, gasista1, gasista2, plomero].forEach{obr=>obr.estaDeLicencia(false)}
		
		assert.throwsException { obra.registrarJornada() }
		
	}
	
	test "tratar de quitar de la obra a un obrero en licencia" {
		obra.quitarObrero(albanil2)
		
		assert.throwsException { obra.quitarObrero(albanil1) }
		
	}
	
	test "Pago de Jornales" {
		albanil1.estaDeLicencia(false)
		plomero.estaDeLicencia(true)	
		obra.registrarJornada()
				
		assert.equals(4000,albanil2.debo())
		assert.equals(2000,albanil1.debo())
		assert.equals(6000,gasista1.debo())
		assert.equals(6000,gasista2.debo())
		assert.equals(3000,plomero.debo())
		assert.equals(7000,electricista.debo())
		assert.equals(28000, obra.deudaTotal())
		
		assert.equals(100000-4000-2000-6000-6000-3000-7000,obra.efectivoObra())
				
	}
}